AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
    Serverless Application Model implementation.
Parameters:
  ApplicationName:
    Type: String
    Description: Application name
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket in which the Swagger specification can be found.
  StageName:
    Type: String
    Default: dev
    Description: The Lambda Function Stage
  SourceEmail:
    Type: String
    Default: learntechpuzz@gmail.com
    Description: Source email

Resources:
  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invocation
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "execute-api:Invoke"
                Resource: "*"  
  # Create IAM Role for CognitoUserPoolClient and CognitoUserPoolDomain settings 
  CognitoUserPoolClientDomainRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CognitoUserPoolClientDomainRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: WriteCloudWatchLogs
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        -
          PolicyName: UpdateUserPoolClient
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:UpdateUserPoolClient'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
        -
          PolicyName: ManageUserPoolDomain
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'cognito-idp:CreateUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DeleteUserPoolDomain'
                Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
              -
                Effect: Allow
                Action: 'cognito-idp:DescribeUserPoolDomain'
                Resource: '*'
        -
          PolicyName: InvokeLambdaFunction
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              -
                Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: 'arn:aws:lambda:*:*:function:*'
  CloudFormationSendResponse:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFormationSendResponse
      Runtime: nodejs8.10
      Code: ./cognito-user-pool-client-domain/CloudFormationSendResponse
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolClientDomainRole.Arn
  CognitoUserPoolClientSettings:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CognitoUserPoolClientSettings
      Runtime: nodejs8.10
      Code: ./cognito-user-pool-client-domain/CognitoUserPoolClientSettings.js
      Handler: CognitoUserPoolClientSettings.handler
      Role: !GetAtt CognitoUserPoolClientDomainRole.Arn
    DependsOn: CloudFormationSendResponse
  CognitoUserPoolDomain:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CognitoUserPoolDomain
      Runtime: nodejs8.10
      Code: ./cognito-user-pool-client-domain/CognitoUserPoolDomain.js
      Handler: CognitoUserPoolDomain.handler
      Role: !GetAtt CognitoUserPoolClientDomainRole.Arn
    DependsOn: CloudFormationSendResponse
  # Creates a user pool in cognito for your app to auth against
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ApplicationName}-user-pool
      MfaConfiguration: "OFF"
      AutoVerifiedAttributes:
        - email      
      EmailConfiguration: 
        EmailSendingAccount: COGNITO_DEFAULT
        ReplyToEmailAddress: "learntechpuzz@gmail.com"
        SourceArn: !Sub arn:aws:ses:us-east-1:${AWS::AccountId}:identity/${SourceEmail}
      LambdaConfig:
        PostConfirmation: !GetAtt CreateUserPostConfirmationFunction.Arn     
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true
  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ApplicationName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  # Creates a federeated Identity pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ApplicationName}Identity
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
  # User Pool Client        
  UserPoolClientSettings:
    Type: 'Custom::CognitoUserPoolClientSettings'
    Properties:
      ServiceToken: !GetAtt CognitoUserPoolClientSettings.Arn
      UserPoolId: !Ref UserPool
      UserPoolClientId: !Ref UserPoolClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL: !Sub https://s3.amazonaws.com/${ApplicationName}/secured.html 
      LogoutURL: !Sub https://s3.amazonaws.com/${ApplicationName}/public.html 
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - "phone"
        - "email"
        - "openid"
  UserPoolDomain:
    Type: 'Custom::CognitoUserPoolDomain'
    Properties:
      ServiceToken: !GetAtt CognitoUserPoolDomain.Arn
      UserPoolId: !Ref UserPool
      Domain: !Sub learntechpuzz-${StageName}   
  # Cognito Permission for access lambda function    
  CognitoLambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateUserPostConfirmationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn          
  # Lambda Function to add user into Dynamo DB (PostConfirmation)    
  CreateUserPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        !Sub ${ApplicationName}-${StageName}-create-user-post-confirmation
      Runtime: java8
      Timeout: 300
      MemorySize: 512
      Handler: com.learntechpuzz.lambda.handler.UserHandler::createUserPostConfirmation
      CodeUri: ./lambda-functions/target/learntechpuzz-aws-lambda-0.1.0-SNAPSHOT.jar
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
  # DynamoDB User table      
  UserTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "UserName"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "UserName"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "User"
  # Lambda Function to create user    
  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        !Sub ${ApplicationName}-${StageName}-create-user
      Runtime: java8
      Timeout: 300
      MemorySize: 512
      Handler: com.learntechpuzz.lambda.handler.UserHandler::createUser
      CodeUri: ./lambda-functions/target/learntechpuzz-aws-lambda-0.1.0-SNAPSHOT.jar
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Events:
        UserApi:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId:
                Ref: RestApi              
  # Api    
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        !Sub ${ApplicationName}-${StageName}
      StageName: !Sub ${StageName}
      DefinitionBody:
          Fn::Transform:
            Name: AWS::Include
            Parameters:
              Location:
                Fn::Join:
                  - ''
                  - - 's3://'
                    - Ref: S3BucketName
                    - '/swagger.yaml'
  GatewayResponseBadRequestBody:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: BAD_REQUEST_BODY
      RestApiId: !Ref RestApi
      StatusCode: '400'                  
  GatewayResponseUnauthorized:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      ResponseType: UNAUTHORIZED
      RestApiId: !Ref RestApi
      StatusCode: '401'                  
# Outputs              
Outputs:
  ApiUrl:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: RestApi
          - Fn::Sub: ".execute-api.${AWS::Region}.amazonaws.com/${StageName}"
